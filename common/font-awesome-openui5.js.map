{"version":3,"sources":["font-awesome-openui5.js","../src/font-awesome-openui5.ts"],"names":["Object","defineProperty","exports","value","defer","require","isNil","utils_1","FontAwesomeOpenUI5","icons","includeAliases","sap","ui","core","IconPool","importIconPool","forEach","icon","id","unicode","addIcon","Array","isArray","aliases","length","alias","Promise","resolve","reject","loadIcons","err","default"],"mappings":"AAAA;ACAA;;;;;;ADEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;ACAA,IAAAC,QAAAC,QAAA,cAAA,CAAA;AACA,IAAAC,QAAAD,QAAA,cAAA,CAAA;AACA,IAAAE,UAAAF,QAAA,SAAA,CAAA;AAEA;;;;;;;IAMAG,kB;;;;;;;;AACC;;;;;;;;;;kCAUwBC,K,EAAyD;AAAA,gBAArBC,cAAqB,uEAAJ,IAAI;;AAChF,gBAAIJ,MAAMK,IAAIC,EAAJ,CAAOC,IAAP,CAAYC,QAAlB,CAAJ,EAAiC;AAChCP,wBAAAQ,cAAA;AACA;AAEDN,kBAAMO,OAAN,CAAc,gBAAI;AACjB;AACA,oBAAI,CAACV,MAAMW,KAAKC,EAAX,CAAD,IAAmB,CAACZ,MAAMW,KAAKE,OAAX,CAAxB,EAA6C;AAC5CZ,4BAAAa,OAAA,CAAQH,KAAKC,EAAb,EAAiBD,KAAKE,OAAtB;AACA;AACD;AACA,oBAAIT,kBAAkBW,MAAMC,OAAN,CAAcL,KAAKM,OAAnB,CAAlB,IAAkDN,KAAKM,OAAL,CAAaC,MAAb,GAAsB,CAA5E,EAAgF;AAC/EP,yBAAKM,OAAL,CAAaP,OAAb,CAAqB,iBAAK;AACzBT,gCAAAa,OAAA,CAAQK,KAAR,EAAeR,KAAKE,OAApB;AACA,qBAFD;AAGA;AACD,aAXD;AAYA;AAED;;;;;;;;;;;;;;uCAW6BV,K,EAAyD;AAAA,gBAArBC,cAAqB,uEAAJ,IAAI;;AACrF,mBAAO,IAAIgB,OAAJ,CAAkB,UAACC,OAAD,EAAUC,MAAV,EAAgB;AACxCxB,sBAAM,YAAA;AACL,wBAAI;AACHI,2CAAmBqB,SAAnB,CAA6BpB,KAA7B,EAAoCC,cAApC;AACAiB;AACA,qBAHD,CAGE,OAAOG,GAAP,EAAY;AACbF,+BAAOE,GAAP;AACA;AACD,iBAPD;AAQA,aATM,CAAP;AAUA;;;;;;AAGF5B,QAAA6B,OAAA,GAAevB,kBAAf","file":"font-awesome-openui5.js","sourcesContent":["\"use strict\";\n/// <reference types=\"font-awesome-icon-chars\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst defer = require(\"lodash.defer\");\nconst isNil = require(\"lodash.isnil\");\nconst utils_1 = require(\"./utils\");\n/**\n * Font Awesome OpenUI5 icons loader.\n *\n * @abstract\n * @class FontAwesomeOpenUI5\n */\nclass FontAwesomeOpenUI5 {\n    /**\n     * Add icons into OpenUI5.\n     *\n     * @static\n     * @see [Font Awesome Icon Character List]{@link https://github.com/gluons/Font-Awesome-Icon-Chars}\n     * @param {FontAwesomeIconChars.Icon[]} icons Icons source.\n     * @param {boolean} [includeAliases=true] Include icons aliases.\n     *\n     * @memberOf FontAwesomeOpenUI5\n     */\n    static loadIcons(icons, includeAliases = true) {\n        if (isNil(sap.ui.core.IconPool)) {\n            utils_1.importIconPool();\n        }\n        icons.forEach(icon => {\n            // Add icon.\n            if (!isNil(icon.id) && !isNil(icon.unicode)) {\n                utils_1.addIcon(icon.id, icon.unicode);\n            }\n            // Add icon aliases.\n            if (includeAliases && Array.isArray(icon.aliases) && (icon.aliases.length > 0)) {\n                icon.aliases.forEach(alias => {\n                    utils_1.addIcon(alias, icon.unicode);\n                });\n            }\n        });\n    }\n    /**\n     * Add icons into OpenUI5 asynchronously.\n     *\n     * @static\n     * @see {@link loadIcons}\n     * @param {FontAwesomeIconChars.Icon[]} icons Icons source.\n     * @param {boolean} [includeAliases=true] Include icons aliases.\n     * @returns {Promise<void>}\n     *\n     * @memberOf FontAwesomeOpenUI5\n     */\n    static loadIconsAsync(icons, includeAliases = true) {\n        return new Promise((resolve, reject) => {\n            defer(() => {\n                try {\n                    FontAwesomeOpenUI5.loadIcons(icons, includeAliases);\n                    resolve();\n                }\n                catch (err) {\n                    reject(err);\n                }\n            });\n        });\n    }\n}\nexports.default = FontAwesomeOpenUI5;\n","/// <reference types=\"font-awesome-icon-chars\" />\r\n\r\nimport * as defer from 'lodash.defer';\r\nimport * as isNil from 'lodash.isnil';\r\nimport { addIcon, importIconPool } from './utils';\r\n\r\n/**\r\n * Font Awesome OpenUI5 icons loader.\r\n *\r\n * @abstract\r\n * @class FontAwesomeOpenUI5\r\n */\r\nabstract class FontAwesomeOpenUI5 {\r\n\t/**\r\n\t * Add icons into OpenUI5.\r\n\t *\r\n\t * @static\r\n\t * @see [Font Awesome Icon Character List]{@link https://github.com/gluons/Font-Awesome-Icon-Chars}\r\n\t * @param {FontAwesomeIconChars.Icon[]} icons Icons source.\r\n\t * @param {boolean} [includeAliases=true] Include icons aliases.\r\n\t *\r\n\t * @memberOf FontAwesomeOpenUI5\r\n\t */\r\n\tpublic static loadIcons(icons: FontAwesomeIconChars.Icon[], includeAliases = true): void {\r\n\t\tif (isNil(sap.ui.core.IconPool)) {\r\n\t\t\timportIconPool();\r\n\t\t}\r\n\r\n\t\ticons.forEach(icon => {\r\n\t\t\t// Add icon.\r\n\t\t\tif (!isNil(icon.id) && !isNil(icon.unicode)) {\r\n\t\t\t\taddIcon(icon.id, icon.unicode);\r\n\t\t\t}\r\n\t\t\t// Add icon aliases.\r\n\t\t\tif (includeAliases && Array.isArray(icon.aliases) && (icon.aliases.length > 0)) {\r\n\t\t\t\ticon.aliases.forEach(alias => {\r\n\t\t\t\t\taddIcon(alias, icon.unicode);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Add icons into OpenUI5 asynchronously.\r\n\t *\r\n\t * @static\r\n\t * @see {@link loadIcons}\r\n\t * @param {FontAwesomeIconChars.Icon[]} icons Icons source.\r\n\t * @param {boolean} [includeAliases=true] Include icons aliases.\r\n\t * @returns {Promise<void>}\r\n\t *\r\n\t * @memberOf FontAwesomeOpenUI5\r\n\t */\r\n\tpublic static loadIconsAsync(icons: FontAwesomeIconChars.Icon[], includeAliases = true): Promise<void> {\r\n\t\treturn new Promise<void>((resolve, reject) => {\r\n\t\t\tdefer(() => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tFontAwesomeOpenUI5.loadIcons(icons, includeAliases);\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default FontAwesomeOpenUI5;\r\n"]}